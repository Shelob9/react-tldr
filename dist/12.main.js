(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{85:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return M});var a=t(5),o=t.n(a),m=t(10),s=t.n(m),c=t(11),r=t.n(c),p=t(12),l=t.n(p),i=t(13),g=t.n(i),h=t(14),d=t.n(h),u=t(0),E=t.n(u),T=t(4),M=function(e){function n(e){var t;return s()(this,n),(t=l()(this,g()(n).call(this,e))).layout=null,t}return d()(n,e),r()(n,[{key:"render",value:function(){var e=this.props,n=e.components;o()(e,["components"]);return E.a.createElement(T.MDXTag,{name:"wrapper",components:n},E.a.createElement(T.MDXTag,{name:"h1",components:n,props:{id:"testing-with-react"}},"Testing With React"),E.a.createElement(T.MDXTag,{name:"p",components:n},"This is slightly out of date. I am starting to prefer ",E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://testing-library.com/docs/react-testing-library/intro"}},E.a.createElement(T.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"react-testing-library")),"."),E.a.createElement(T.MDXTag,{name:"h2",components:n,props:{id:"snapshot-testing-with-jest"}},"Snapshot Testing With Jest"),E.a.createElement(T.MDXTag,{name:"pre",components:n},E.a.createElement(T.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx"}},"import React, {Fragment} from 'react';\nimport renderer from 'react-test-renderer';\nimport { CalderaNotice } from './CalderaNotice';\n\ndescribe('CalderaNotice', () => {\n    it('Matches snapshot with Success message', () => {\n        const component = renderer.create(\n            <CalderaNotice isError={false}>\n                Good Things!\n            </CalderaNotice>\n        );\n        expect(component.toJSON()).toMatchSnapshot();\n    });\n\n    it('Matches snapshot with error message', () => {\n        const component = renderer.create(\n            <CalderaNotice isError={true}>\n                Bad Things!\n            </CalderaNotice>\n        );\n        expect(component.toJSON()).toMatchSnapshot();\n    });\n});\n")),E.a.createElement(T.MDXTag,{name:"h2",components:n,props:{id:"simulating-dom-events-with-enzyme"}},"Simulating DOM Events With Enzyme"),E.a.createElement(T.MDXTag,{name:"ul",components:n},E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://airbnb.io/enzyme/docs/api/ShallowWrapper/simulate.html"}},"https://airbnb.io/enzyme/docs/api/ShallowWrapper/simulate.html")),E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://jestjs.io/docs/en/mock-functions#using-a-mock-function"}},"https://jestjs.io/docs/en/mock-functions#using-a-mock-function"))),E.a.createElement(T.MDXTag,{name:"h3",components:n,props:{id:"simulating-events-with-enzyme"}},"Simulating Events With Enzyme"),E.a.createElement(T.MDXTag,{name:"pre",components:n},E.a.createElement(T.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"const component = shallow(\n    <select />\n);\nconst event = {target: {value: 2}};\ncomponent.find( 'select' ).simulate( 'change', event );\n")),E.a.createElement(T.MDXTag,{name:"h3",components:n,props:{id:"click-event"}},"Click Event"),E.a.createElement(T.MDXTag,{name:"pre",components:n},E.a.createElement(T.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"const component = shallow(\n    <input />\n);\ncomponent.find( 'input' ).simulate( 'click' );\n")),E.a.createElement(T.MDXTag,{name:"h2",components:n,props:{id:"testing--events-with-enzyme-and-jest"}},"Testing  Events With Enzyme and Jest"),E.a.createElement(T.MDXTag,{name:"ul",components:n},E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://jestjs.io/docs/en/mock-functions"}},"https://jestjs.io/docs/en/mock-functions"))),E.a.createElement(T.MDXTag,{name:"pre",components:n},E.a.createElement(T.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import { shallow } from 'enzyme';\n\ndescribe( 'Something', () => {\n    let onChange;\n    beforeEach( () => {\n        //Reset mocks\n        onChange= jest.fn();\n    });\n\n    it( 'Changes calls change handler', () => {\n        const component = shallow(\n            <input\n                onChange={onChange}\n            />\n        );\n        //Find input and simulate change\n        component.find( 'input' ).simulate( 'change' );\n        //check mock callback was called once\n        expect(onChange.mock.calls.length).toBe(1);\n    });\n\n    it( 'Calls change handler with value', () => {\n        const component = shallow(\n            <select\n                onChange={onChange}\n            >\n                <option value={1}key={1}>1</option>\n                <option value={2} key={2}>2</option>\n            </select>\n        );\n        const expectedValue = 2;\n        //Find select and simulate change\n        const event = {target: {value: expectedValue}};\n        component.find( 'select' ).simulate( 'change', event );\n        //check mock callback was called with the right value\n        expect(onChange.mock.calls[0][0]).toBe(expectedValue);\n    });\n});\n")),E.a.createElement(T.MDXTag,{name:"h3",components:n,props:{id:"there-can-only-be-one"}},"There Can Only Be One"),E.a.createElement(T.MDXTag,{name:"p",components:n},"You can not call ",E.a.createElement(T.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"simulate()")," on multiple nodes. Use ",E.a.createElement(T.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"first()"),"."),E.a.createElement(T.MDXTag,{name:"ul",components:n},E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://airbnb.io/enzyme/docs/api/ReactWrapper/first.html"}},"https://airbnb.io/enzyme/docs/api/ReactWrapper/first.html"))),E.a.createElement(T.MDXTag,{name:"pre",components:n},E.a.createElement(T.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"    it( 'Changes calls change handler of radio field', () =>  {\n        const component = mount(<Field\n            field={radioField} onChange={onChange} onBlur={onBlur}\n        />);\n\n        component.find( 'input' ).first().simulate( 'change' );\n        expect(onChange.mock.calls.length).toBe(1);\n    });\n")),E.a.createElement(T.MDXTag,{name:"h2",components:n,props:{id:"recommended-reading"}},"Recommended Reading"),E.a.createElement(T.MDXTag,{name:"ul",components:n},E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://testing-library.com/docs/react-testing-library/intro"}},"React Testing Library")),E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://devhints.io/jest"}},"Jest Cheatsheat")),E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://reactjs.org/docs/test-renderer.html"}},"https://reactjs.org/docs/test-renderer.html"))),E.a.createElement(T.MDXTag,{name:"h3",components:n,props:{id:"articles-by-me"}},"Articles By Me"),E.a.createElement(T.MDXTag,{name:"ul",components:n},E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://torquemag.io/2018/10/getting-started-with-react-unit-testing-for-wordpress-development/"}},"Getting Started with React Unit Testing for WordPress Development")),E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://torquemag.io/2018/11/testing-nested-components-in-a-react-app/"}},"Testing Nested Components in a React App")),E.a.createElement(T.MDXTag,{name:"li",components:n,parentName:"ul"},E.a.createElement(T.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://torquemag.io/2018/11/testing-react-components-with-enzyme/"}},"Testing React Components with Enzyme"))))}}]),n}(E.a.Component)}}]);